// week 11, 2021

#include <iostream>
#include <map>
#include <stack>
#include <string>

class Solution
{
public:
    bool isValid(std::string);
    Solution()
    {
        // set up map
        map_[']'] = '[';
        map_[')'] = '(';
        map_['}'] = '{';
    }

private:
    std::map<char, char> map_;
    std::stack<char> stack_;
};

int main()
{
    std::string s1, s2, s3;
    Solution S1, S2, S3;
    s1 = "()(){(())";
    // should return False
    std::cout << "Result for " << s1 << " is: " << S1.isValid(s1) << '\n';

    s2 = "";
    // should return True
    std::cout << "Result for " << s2 << " is: " << S2.isValid(s2) << '\n';

    s3 = "([{}])()";
    // should return True
    std::cout << "Result for " << s3 << " is: " << S3.isValid(s3) << '\n';

    return 0;
}

bool Solution::isValid(std::string s)
{
  // no brackets
  if (s.size() == 0)
    return true;

  for (size_t i = 0; i < s.size(); ++i)
    {
      if ((s[i] == ')' || s[i] == '}' || s[i] == ']') && !stack_.empty())
        {
	  if (stack_.top() != map_[s[i]] || stack_.empty())
	    return false;
	  stack_.pop();
        }
      else
	stack_.push(s[i]);
    }
  //  if (!stack_.empty())
  //    return false;
  return true;
}
